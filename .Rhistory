knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Установка необходимых пакетов (если не установлены)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(forcats)
library(plotly)
library(countrycode)
library(readcsv)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Установка необходимых пакетов (если не установлены)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(forcats)
library(plotly)
library(countrycode)
library(readr)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(forcats)
library(plotly)
library(countrycode)
library(readr)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(forcats)
library(plotly)
library(countrycode)
library(readr)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(forcats)
library(plotly)
library(countrycode)
data <- read_csv("Work_From_Anywhere_Salary_Data.csv")
head(data, 10)
class(data)
data_clean <- data %>%
mutate(`Experience Level` = factor(
case_when(
`Experience Level` == "Entry" ~ "Начальный",
`Experience Level` == "Mid" ~ "Средний",
`Experience Level` == "Senior" ~ "Старший",
`Experience Level` == "Lead" ~ "Ведущий",
TRUE ~ `Experience Level`
),
levels = c("Начальный", "Средний", "Старший", "Ведущий")
))
# Создаем таблицу для тепловой карты (средняя зарплата по индустриям и уровню опыта)
heatmap_data <- data_clean %>%
group_by(`Industry`, `Experience Level`) %>%
summarise(Средняя_зарплата = mean(Salary_USD, na.rm = TRUE), .groups = "drop") %>%
mutate(Индустрия = as.factor(`Industry`))
library(plotly)
# Применяем фильтрацию (уже сделано выше, используем data_clean_filtered)
# Подготовка данных для дерева
treemap_data <- data_clean_filtered %>%
group_by(`Job Title`) %>%
summarise(
Количество = n(),
Средняя_зарплата = mean(Salary_USD, na.rm = TRUE) / 1000  # Переводим зарплату в тысячи
) %>%
filter(Количество >= 5) %>%  # Учитываем только профессии с достаточным количеством
ungroup()
library(dplyr)
# Пересчет зарплат: для INR умножаем на 12 (месячные в годовые) перед конверсией
data_clean <- data %>%
mutate(Salary_USD = case_when(
Currency == "USD" ~ `Salary (Annual)`,  # Без изменений для USD
Currency == "EUR" ~ `Salary (Annual)` * 1.13,  # Без изменений для EUR
Currency == "INR" ~ (`Salary (Annual)` * 12) * 0.012,  # Месячные INR в годовые, затем в USD
Currency == "GBP" ~ `Salary (Annual)` * 1.35,  # Без изменений для GBP
Currency == "AUD" ~ `Salary (Annual)` * 0.64  # Без изменений для AUD
)) %>%
# Удаление строк с зарплатой 0 или некорректными значениями
filter(Salary_USD > 0)
# Количество строк после фильтрации
cat("Количество строк в данных после фильтрации:", nrow(data_clean), "\n")
# Первые строки преобразованных данных
head(data_clean)
# Сводная статистика по зарплатам в USD
summary(data_clean$Salary_USD)
# Проверка записей с низкими зарплатами после пересчета
low_salary_data <- data_clean %>%
filter(Salary_USD < 10000)
cat("Количество записей с зарплатой менее 10,000 USD после пересчета:", nrow(low_salary_data), "\n")
# Вывод первых 10 записей с низкими зарплатами для анализа
print(head(low_salary_data, 10))
# Отключаем научную нотацию
options(scipen = 999)
# Фильтрация данных
data_clean_filtered <- data_clean %>%
filter(!is.na(Salary_USD), Salary_USD > 0, Salary_USD <= 500000)
# Гистограмма с промежуточными значениями
ggplot(data_clean_filtered, aes(x = Salary_USD)) +
geom_histogram(binwidth = 10000, fill = "skyblue", color = "black") +
labs(
title = "Распределение зарплат (2024, в USD)",
x = "Зарплата (USD)",
y = "Частота"
) +
scale_x_continuous(
breaks = seq(0, 500000, by = 50000),  # каждые 50 тыс
labels = scales::comma                # красиво отображает числа с запятыми
) +
theme_minimal()
library(ggplot2)
# Гистограмма с логарифмической шкалой
ggplot(data_clean, aes(x = Salary_USD)) +
geom_histogram(binwidth = 0.1, fill = "lightcoral", color = "black") +  # binwidth для логарифмической шкалы в долях логарифма
scale_x_log10(
breaks = c(100, 1000, 10000, 50000, 100000, 250000),  # Логарифмическая шкала с понятными отметками
labels = scales::comma  # Форматирование чисел с запятыми
) +
labs(
title = "Распределение зарплат (2024, в USD) с логарифмической шкалой",
x = "Зарплата (USD, логарифмическая шкала)",
y = "Частота"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Центрируем заголовок
axis.text.x = element_text(angle = 45, hjust = 1)  # Поворачиваем метки оси X для читаемости
)
library(plotly)
# Применяем фильтрацию (уже сделано выше, используем data_clean_filtered)
# Подготовка данных для дерева
treemap_data <- data_clean_filtered %>%
group_by(`Job Title`) %>%
summarise(
Количество = n(),
Средняя_зарплата = mean(Salary_USD, na.rm = TRUE) / 1000  # Переводим зарплату в тысячи
) %>%
filter(Количество >= 5) %>%  # Учитываем только профессии с достаточным количеством
ungroup()
# Интерактивное дерево
fig3 <- plot_ly(
treemap_data,
type = "treemap",
labels = ~`Job Title`,
parents = ~"",
values = ~Количество,
marker = list(colorscale = "Reds", colorbar = list(title = "Зарплата (тыс. USD)")),
text = ~paste("Профессия: ", `Job Title`, "<br>Количество: ", Количество, "<br>Зарплата: ", round(Средняя_зарплата), " тыс. USD"),
hoverinfo = "text",
textinfo = "label+value+percent parent"
) %>%
layout(title = "Доля должностей по профессиям")
fig3
data_clean <- data %>%
mutate(`Experience Level` = factor(
case_when(
`Experience Level` == "Entry" ~ "Начальный",
`Experience Level` == "Mid" ~ "Средний",
`Experience Level` == "Senior" ~ "Старший",
`Experience Level` == "Lead" ~ "Ведущий",
TRUE ~ `Experience Level`
),
levels = c("Начальный", "Средний", "Старший", "Ведущий")
))
# Создаем таблицу для тепловой карты (средняя зарплата по индустриям и уровню опыта)
heatmap_data <- data_clean %>%
group_by(`Industry`, `Experience Level`) %>%
summarise(Средняя_зарплата = mean(Salary_USD, na.rm = TRUE), .groups = "drop") %>%
mutate(Индустрия = as.factor(`Industry`))
data_clean <- data %>%
mutate(Salary_USD = case_when(
Currency == "USD" ~ `Salary (Annual)`,
Currency == "EUR" ~ `Salary (Annual)` * 1.13,
Currency == "INR" ~ (`Salary (Annual)` * 12) * 0.012,
Currency == "GBP" ~ `Salary (Annual)` * 1.35,
Currency == "AUD" ~ `Salary (Annual)` * 0.64,
TRUE ~ NA_real_
)) %>%
filter(!is.na(Salary_USD), Salary_USD > 0) %>%
mutate(`Experience Level` = factor(
case_when(
`Experience Level` == "Entry" ~ "Начальный",
`Experience Level` == "Mid" ~ "Средний",
`Experience Level` == "Senior" ~ "Старший",
`Experience Level` == "Lead" ~ "Ведущий",
TRUE ~ as.character(`Experience Level`)
),
levels = c("Начальный", "Средний", "Старший", "Ведущий")
))
heatmap_data <- data_clean %>%
group_by(`Industry`, `Experience Level`) %>%
summarise(Средняя_зарплата = mean(Salary_USD, na.rm = TRUE), .groups = "drop") %>%
mutate(Индустрия = as.factor(`Industry`))
fig2 <- plot_ly(
heatmap_data,
x = ~`Experience Level`,
y = ~Индустрия,
z = ~Средняя_зарплата,
type = "heatmap",
colorscale = "Blues",
reversescale = FALSE,
text = ~paste("Индустрия: ", Индустрия,
"<br>Уровень: ", `Experience Level`,
"<br>Средняя зарплата: ", round(Средняя_зарплата), " USD"),
hoverinfo = "text"
) %>%
layout(
title = "Средняя зарплата по индустриям и уровню опыта",
xaxis = list(title = "Уровень опыта"),
yaxis = list(title = "Индустрия")
)
fig2
heatmap_data <- data_clean %>%
group_by(`Industry`, `Experience Level`) %>%
summarise(Средняя_зарплата = mean(Salary_USD, na.rm = TRUE), .groups = "drop") %>%
mutate(
Индустрия = case_when(
Industry == "Finance" ~ "Финансы",
Industry == "Education" ~ "Образование",
Industry == "Media" ~ "Медиа",
Industry == "Tech" ~ "Технологии",
Industry == "Healthcare" ~ "Здравоохранение",
Industry == "Retail" ~ "Розница",
TRUE ~ Industry
),
Индустрия = as.factor(Индустрия)
)
fig2 <- plot_ly(
heatmap_data,
x = ~`Experience Level`,
y = ~Индустрия,
z = ~Средняя_зарплата,
type = "heatmap",
colorscale = "Blues",
reversescale = FALSE,
text = ~paste("Индустрия: ", Индустрия,
"<br>Уровень: ", `Experience Level`,
"<br>Средняя зарплата: ", round(Средняя_зарплата), " USD"),
hoverinfo = "text"
) %>%
layout(
title = "Средняя зарплата по индустриям и уровню опыта",
xaxis = list(title = "Уровень опыта"),
yaxis = list(title = "Индустрия")
)
fig2
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(forcats)
library(plotly)
library(countrycode)
library(readr)
heatmap_data <- data_clean %>%
group_by(`Industry`, `Experience Level`) %>%
summarise(Средняя_зарплата = mean(Salary_USD, na.rm = TRUE), .groups = "drop") %>%
mutate(
Индустрия = case_when(
Industry == "Finance" ~ "Финансы",
Industry == "Education" ~ "Образование",
Industry == "Media" ~ "Медиа",
Industry == "Tech" ~ "Технологии",
Industry == "Healthcare" ~ "Здравоохранение",
Industry == "Retail" ~ "Розница",
TRUE ~ Industry
),
Индустрия = as.factor(Индустрия)
)
fig2 <- plot_ly(
heatmap_data,
x = ~`Experience Level`,
y = ~Индустрия,
z = ~Средняя_зарплата,
type = "heatmap",
colorscale = "Blues",
reversescale = FALSE,
text = ~paste("Индустрия: ", Индустрия,
"<br>Уровень: ", `Experience Level`,
"<br>Средняя зарплата: ", round(Средняя_зарплата), " USD"),
hoverinfo = "text"
) %>%
layout(
title = "Средняя зарплата по индустриям и уровню опыта",
xaxis = list(title = "Уровень опыта"),
yaxis = list(title = "Индустрия")
)
fig2
